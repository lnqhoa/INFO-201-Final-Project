dtable <- subset(df1, df1$id_county == input$analysis_var)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("shinywidgets")
library("shinyWidgets")
library(shinyWidgets)
install.packages("shinyWidgets")
library("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/19254/Desktop/project_shiny/Food_Availability")
runApp()
library('png')
library('jpg')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/19254/Desktop/Drop Down Prac/projPrac')
runApp('C:/Users/19254/Desktop/Drop Down Prac/projPrac')
setwd("C:/Users/19254/Desktop/Drop Down Prac/projPrac")
runApp()
runApp()
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
tags$h1()
tags$a(href = "www.rstudio.com", "RStudio")
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
update.packages()
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
library('tags')
library('html')
library('HTML')
install.packages("html")
runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
install.packages("png")
install.packages("png")
library('png')
shiny::runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
install.packages("png")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/19254/Desktop/a7')
runApp('C:/Users/19254/Desktop/a7')
#install.packages("shiny")
#install.packages("rsconnect")
#install.packages("dplyr")
library("shiny")
library("dplyr")
library("rsconnect")
library("DT")
library("leaflet")
#source("propublica.R")
page_1 <- tabPanel("About A7",
titlePanel("Access to Congressional Representative Information Using
API and Shiny UI Skills"),
tags$br(),
h2(em("Overview")),
p("The purpose of this assignment is to demonstrate our coding and
critical-thinking skills. This is a culmination of work done the entire
quarter."),
p("Two major components of this assignment are to access a site's API and
build an interactive application with Shiny. For the first part, we
wrote search queries to a website. We wrangled, manipulated and formatted
datasets. Then, took the filtered data and came up with functions to
determine specific info about representatives. Users would then, have the
opportunity to explore data from ",
em(a("ProPublica", href = "https://projects.propublica.org/api-docs/congress-api/")),
em("Congress API"), "and interact with the application; ultimately, have
their results published on shinyapps.io"),
tags$br(),
h2(em("Affiliation")),
h4("Richard Dait"),
h4("INFO-201A: Technical Foundations of Informatics"),
h4("The Information School"),
h4("University of Washington"),
h4("Autumn 2019"),
tags$br(),
h2(em("Reflection")),
p("While building the Shiny application poised some problems, it was applying
the API concepts to be the most challenging. I had an
incredibly difficult time constructing a response variable to conduct
a search query. It took me over a day. To be frank, the instructions
in the rubric and Canvas were confusing and not very detailed. I overcame
the challenge through repetition, assistance from the TA and perseverance.
Once I figured it out, I created another search query for member id info
rather quickly. Once again, I agree with O'Neil that Big Data or large
datasets can be very tricky and overwhelming."),
)
page_2 <- tabPanel("Summary", titlePanel("Categorical Data of Gender and Political Affiliation"), align = "center",
tags$br(),
tags$br(),
tags$br(),
sidebarLayout(
sidebarPanel(helpText("Create a horizontal bar chart with information from the
Propublica Congress API website."),
selectInput(inputId = "hbar_in",
label = em("Select or Enter a Postal Code of a U.S. State to
Display"), choices = flat_all_memb_results$state)
),
# Displays the data table and details-on-demand table in the main panel
mainPanel(
plotOutput(outputId = "hbarout1"),
tags$br(),
tags$br(),
tags$br(),
plotOutput(outputId = "hbarout2"))
)
)
page_3 <- tabPanel("State Rep Query",
titlePanel("Congressional Representative Information"), align = "center",
tags$br(),
tags$br(),
tags$br(),
sidebarLayout(
sidebarPanel(helpText("Create a data table with information from the
Propublica Congress API website."),
selectInput(inputId = "st_analysis",
label = em("Select or Enter a Postal Code of a U.S. State to
Display"), choices = flat_all_memb_results$state),
tags$br(),
radioButtons(inputId = "list", label = em("Details on Demand"),
choices = flat_all_memb_results$last_name)
),
# Displays the data table and details-on-demand table in the main panel
mainPanel(
dataTableOutput(outputId = "d_table"),
tags$br(),
tags$br(),
tags$br(),
tableOutput("details")
)
)
)
# Passes Each Page to a Multi-Page Layout Using NavbarPage
my_ui <- navbarPage("",
page_1,
page_2,
page_3)
#update.packages()
#install.packages("httr")
library("httr")
#install.packages("jsonlite")
library("jsonlite")
#install.packages("dplyr")
library("dplyr")
#install.packages("ggrepel")
library("ggrepel")
#install.packages("ggmap")
library("ggmap")
#install.packages("tidyr")
library("tidyr")
#install.packages("lubridate")
library("lubridate")
#install.packages("stringr")
library("stringr")
# Loads API key (stored in another file)
source(".gitignore/api-key.R")
# Default variables to be used
chamber <- "house"
congress <- 116
state <- "WA"
# Constructs a search query
base_uri <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(chamber, "/", state, "/", "/current.json") # Function #1: Takes two parameters
resource_uri <- paste0(base_uri, endpoint)
response <- GET(resource_uri, add_headers("X-API-KeY" = propublica_key))
# Parse results and isolates data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Checks to see if it is already a data frame
is.data.frame(response_data) # FALSE
# Inspects the data
str(response_data) # As a formatted string
names(response_data) # 'status', 'copyright', 'results'
# Extracts the data
results <- response_data$results
is.data.frame(results) # TRUE
# Flattens the data frame and returns data on the 10 Representatives representing WA State
results_1 <- flatten(response_data$results)
# Another way of using a member id parameter and returning info about that person.
# The second search query below returns a more comprehensive row of info.
member_data <- results_1 %>%
filter(id == "H001056") %>%
select(first_name, last_name, gender, party, district, next_election)
View(member_data) # Returns: Jaime Herrera Beutler F	R	3	2020
# Below investigates, calculates and answers function 2 & 3.
# Member id of representative
memb_id <- "H001056"
# Constructs a second search query and returns data about a particular member
base_uri_2 <- "https://api.propublica.org/congress/v1/members/"
endpoint_2 <- paste0(memb_id, ".json") # Function #2: Takes a memb_id parameter
resource_uri_2 <- paste0(base_uri_2, endpoint_2)
response_2 <- GET(resource_uri_2, add_headers("X-API-KeY" = propublica_key))
# Parse results and isolates data of interest
response_text_2 <- content(response_2, type = "text")
response_data_2 <- fromJSON(response_text_2)
# Checks to see if it is already a data frame
is.data.frame(response_data_2) # FALSE
# Inspects the data
str(response_data_2) # As a formatted string
names(response_data_2) # 'status', 'copyright', 'results'
# Extracts the data
extract_memb_data <- response_data_2$results
is.data.frame(extract_memb_data) # TRUE
# Flattens the data frame
flat_memb_results <- flatten(response_data_2$results) # Displays row of member info
# H001056	Jaime	NA	Herrera Beutler	NA	1978-11-03	F	https://herrerabeutler.house.gov
# 412486	95198	101907	21187	HerreraBeutler	herrerabeutler	RepHerreraBeutler	N00031559
# /m/0cz8yx2	https://herrerabeutler.house.gov/news/rss.aspx	TRUE	R	2019-11-21
# 2019-11-28 15:31:30 -0500	78 variables
# Year() from lubridate library and package are used to calculate age of rep
current_year <- 2019
age <- current_year - year(flat_memb_results$date_of_birth) # Returns 41
# Constructs a search query.
base_uri_3 <- "https://api.propublica.org/congress/v1/"
endpoint_3 <- paste0(congress, "/", chamber , "/members.json") # Takes in two parameters
resource_uri_3 <- paste0(base_uri_3, endpoint_3)
response_3 <- GET(resource_uri_3, add_headers("X-API-KeY" = propublica_key))
# Parse results and isolates data of interest
response_text_3 <- content(response_3, type = "text")
response_data_3 <- fromJSON(response_text_3)
# Checks to see if it is already a data frame
is.data.frame(response_data_3) # FALSE
# Inspects the data
str(response_data_3) # As a formatted string
names(response_data_3) # 'status', 'copyright', 'results'
# Extracts the data
extract_all_memb_data <- response_data_3$results
is.data.frame(extract_all_memb_data) # TRUE
# Flattens the data frame and displays all members info
flat_all_memb_results <- flatten((response_data_3$results)$members[[1]])
# Function #3: Calculates the age of all reps by applying the year() function via the lubridate
# library. Once the year is extracted, it is subtracted from the current year to determine the
# age of all members.
memb_age <- current_year - year(flat_all_memb_results$date_of_birth)
# Creates a new column (ie., reps_age) via the mutate function
flat_all_memb_results <- mutate(flat_all_memb_results, rep_age = memb_age)
# Code below determines the age of member id "H001038" with the dplyr filter() function.
sel_memb_age <- flat_all_memb_results %>%
select(id, rep_age) %>%
filter(id == "H001038") # 60
# Function 4: Computes summary information for plotting via the summary page
sum_bar_f <- subset(flat_all_memb_results$gender, flat_all_memb_results$gender == "F")
sum_bar_ff <- length(sum_bar_f) # 106 total females in the congressional house
sum_bar_m <- subset(flat_all_memb_results$gender, flat_all_memb_results$gender == "M")
sum_bar_mm <- length(sum_bar_m) # 338 total males in the congressional house
# Example summary information for the WA State delegation
sum_bar_wa_g <- flat_all_memb_results %>%
filter(state == "WA") %>% # Filters to WA state
select(last_name, state, gender) # Selects only last name, state and gender
View(sum_bar_wa_g) # Displays summary info via a new data set
# Counts the number of Democrats and Replublicans in WA
num_wa_f <- subset(sum_bar_wa_g$gender, sum_bar_wa_g$gender == "F")
num_wa_ff <- length(num_wa_f) # 5 females representing the state of WA
num_wa_m <- subset(sum_bar_wa_g$gender, sum_bar_wa_g$gender == "M")
num_wa_mm <- length(num_wa_m) # 5 males representing the state of WA
sum_bar_1 <- subset(flat_all_memb_results$party, flat_all_memb_results$party == "D")
sum_bar_D <- length(sum_bar_1) # 239 total Democrats
sum_bar_2 <- subset(flat_all_memb_results$party, flat_all_memb_results$party == "R")
sum_bar_R <- length(sum_bar_2) # 204 total Republicans
# Example summary information for the WA State delegation
sum_bar_wa <- flat_all_memb_results %>%
filter(state == "WA") %>% # Filters to WA state
select(last_name, state, party) # Selects only last name, state and party
View(sum_bar_wa) # Displays summary info via a new data set
# Counts the number of Democrats and Replublicans in WA
num_wa_d <- subset(sum_bar_wa$party, sum_bar_wa$party == "D")
num_wa_dd <- length(num_wa_d) # 7 Democrats
num_wa_r <- subset(sum_bar_wa$party, sum_bar_wa$party == "R")
num_wa_rr <- length(num_wa_r) # 3 Republicans
num_wa_r <- subset(sum_bar_wa$party, sum_bar_wa$party == "R")
# Counts the number of Democrats and Replublicans in WA
num_wa_d <- subset(sum_bar_wa$party, sum_bar_wa$party == "D")
# Example summary information for the WA State delegation
sum_bar_wa <- flat_all_memb_results %>%
filter(state == "WA") %>% # Filters to WA state
select(last_name, state, party) # Selects only last name, state and party
# Creates a new column (ie., reps_age) via the mutate function
flat_all_memb_results <- mutate(flat_all_memb_results, rep_age = memb_age)
# Flattens the data frame and displays all members info
flat_all_memb_results <- flatten((response_data_3$results)$members[[1]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
