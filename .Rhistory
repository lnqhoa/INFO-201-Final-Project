if (typeof(presidentialElections$demVote) == 'numeric'))
#demVote_col <- presidentialElections %>%
#pull(colname)
#view(demVote_col)
#if(sapply(is.numeric(demVote))){
#if (typeof(presidentialElections$col_names,is.numeric)){
# presidentialElections %>%
# select(col_names) %>%
#return(get_col_info(demVote))
summarize(min = min(col_names),
max = max(col_names),
mean = mean(col_names))
}
get_col_info <- function(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric')){}
#demVote_col <- presidentialElections %>%
#pull(colname)
#view(demVote_col)
#if(sapply(is.numeric(demVote))){
#if (typeof(presidentialElections$col_names,is.numeric))
# presidentialElections %>%
# select(col_names) %>%
#return(get_col_info(demVote))
summarize(min = min(col_names),
max = max(col_names),
mean = mean(col_names))
}
get_col_info <- function(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric'){
#demVote_col <- presidentialElections %>%
#pull(colname)
#view(demVote_col)
#if(sapply(is.numeric(demVote))){
#if (typeof(presidentialElections$col_names,is.numeric))
# presidentialElections %>%
# select(col_names) %>%
#return(get_col_info(demVote))
summarize(min = min(col_names),
max = max(col_names),
mean = mean(col_names))
}
get_col_info <- function(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric'){
#demVote_col <- presidentialElections %>%
#pull(colname)
#view(demVote_col)
#if(sapply(is.numeric(demVote))){
#if (typeof(presidentialElections$col_names,is.numeric))
# presidentialElections %>%
# select(col_names) %>%
#return(get_col_info(demVote))
summarize(min = min(col_names),
max = max(col_names),
mean = mean(col_names))
}
}
get_col_info(demVote, presidentialElections)
get_col_info(demVote, presidentialElections)
get_col_info <- function(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric'){
summarize(presidentialElections, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
}
}
get_col_info(demVote, presidentialElections)
View(get_col_info)
summary_information <- summarize(presidentialElections, mean_dem_vote = mean(demVote),
median_dem_vote = median(demVote), max_dem_vote = max(demVote),
mean_year = mean(year), median_year = median(year), max(year), count = n())
summary_information
View(summary_information)
get_col_info <- summarize(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric'){
summarize(presidentialElections, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
}
}
get_col_info <- summarize(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric'){
summarize(presidentialElections, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
}
}
get_col_info <- summarize(demVote, presidentialElections){
if (typeof(presidentialElections$demVote) == 'numeric'){
summarize(min = min(colnames),
max = max(col_names),
mean = mean(col_names))
}
}
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
is.data.frame(presidentialElections)
View(pokemon)
fire_pokemon <- filter(pokemon, Type.1 == 'Fire')
fire_pokemon
view(presidentialElections)
xx <- filter(presidentialElections, demVote == 'numeric')
xx
View(xx)
xx <- select(presidentialElections, demVote == 'numeric')
xx <- filter(presidentialElections, demVote == numeric)
xx <- filter(presidentialElections, is.numeric(demVote))
xx
View(xx)
View(strong_fire_pokemon)
View(strong_fire_pokemon_reduced)
View(strong_fire_pokemon)
typeof(demVote)
typeof(presidentialElections$demVote)
xx <- select(presidentialElections, demVote)
xx
typeof(presidentialElections, demVote) %>%
select(presidentialElections, demVote)
typeof(presidentialElections, demVote == 'numeric') %>%
select(presidentialElections, demVote)
typeof(presidentialElections, is.numeric()) %>%
select(presidentialElections, demVote)
typeof(presidentialElections, is.numeric(demVote)) %>%
select(presidentialElections, demVote)
xx <- presidentialElections %>%
select(demVote) %>%
summarize(aa = mean(demVote))
xx
View(xx)
xx <- presidentialElections %>%
select(demVote, year) %>%
summarize(aa = mean(demVote))
xx
View(xx)
xx <- presidentialElections %>%
filter(demVote, year) %>%
summarize(aa = mean(demVote))
xx
View(xx)
xx <- filter(presidentialElections, demVote == '')
xx
View(xx)
xx <- select(presidentialElections, demVote == '')
xx <- select(presidentialElections, demVote)
xx
xx_col <- function(presidentialElections, demVote){}
xx_col <- function(presidentialElections, demVote){}
xx_col <- function(presidentialElections, demVote){}
colnames(demVote)
colnames(demVote, do.Null = TRUE, prefix = "col")
colnames(presidentialElections, do.Null = TRUE, prefix = "col")
get_col_info <- summarize(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
print(demVote)
}
}
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
print(demVote)
}
}
View(get_col_info)
typeof(is.numeric(demVote))
xxx <- typeof(is.numeric(demVote))
sapply(presidentialElections, demVote)
sapply(presidentialElections, class)
View(xx_col)
View(get_col_info)
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
print(get_col_info())
}
}
get_col_info(demVote, presidentialElections)
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
return(get_col_info)
}
}
View(get_col_info)
view(get_col_info())
view(get_col_info(demVote, presidentialElections))
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
return(get_col_info)
}
}
View(get_col_info)
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
return(summarize(presidentialElections, min = min(colnames)),
max = max(col_names),
mean = mean(col_names))
}
}
View(get_col_info)
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
return(summarize(presidentialElections, min = min(colnames)),
max = max(col_names),
mean = mean(col_names))
}
print(get_col_info(demVote, presidentialElections))
}
View(get_col_info)
get_col_info <- function(demVote, presidentialElections){
if (typeof(is.numeric(demVote))){
return(summarize(presidentialElections, min = min(colnames),
max = max(col_names),
mean = mean(col_names)))
}
print(get_col_info(demVote, presidentialElections))
}
View(get_col_info)
xxx <- 3
if (is.numeric(xxx)){}
if (is.numeric(xxx)){
return(xxx)
}
get_col_info <- function(demVote, presidentialElections){
demVote <- is.numeric(demVote)
print(demVote)
}
View(get_col_info)
get_col_info <- function(presidentialElections, demVote){
demVote <- is.numeric(demVote)
print(demVote)
}
View(get_col_info)
get_col_info(presidentialElections, demVote)
get_col_info <- select(presidentialElections, demVote){
demVote <- is.numeric(demVote)
print(demVote)
}
get_col_info <- function(presidentialElections, demVote){
demVote_col <- is.numeric(demVote)
demVote_summary <- summarize(presidentialElections, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
}
print(demVote_summary)
get_col_info <- function(presidentialElections, demVote){
demVote_col <- is.numeric(demVote)
demVote_summary <- summarize(presidentialElections, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
}
View(get_col_info)
print(demVote_summary)
group <- group_by(presidentialElections, state)
summarize(grouped, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
grouped <- group_by(presidentialElections, state)
summarize(grouped, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
grouped <- group_by(presidentialElections, state)
summarize(grouped, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
grouped <- group_by(presidentialElections, state)
summarize(grouped, min = min(colnames),
max = max(col_names),
mean = mean(col_names))
View(grouped)
grouped <- group_by(presidentialElections, state)
summarize(grouped, min = min(colnames), max = max(colnames), mean = mean(colnames))
summarize(grouped, min = min(col_names), max = max(col_names), mean = mean(col_names))
summarize(grouped, min = min(colname), max = max(colname), mean = mean(colname))
summarize(grouped, min = min(colnames), max = max(colnames), mean = mean(colnames))
summarize(grouped, min1 = min(colnames), max1 = max(colnames), mean1 = mean(colnames))
summarize(grouped, min1 = min(demVote), max1 = max(demVote), mean1 = mean(demVote))
get_col_info <- function(presidentialElections, demVote){
demVote_col <- is.numeric(demVote)
grouped <- group_by(presidentialElections, state)
summarize(grouped, min_dv = min(demVote),
max_dv = max(demVote),
mean_dv = mean(demVote))
}
View(get_col_info)
get_col_info <- function(presidentialElections, demVote){
if (demVote_col <- is.numeric(demVote))
grouped <- group_by(presidentialElections, state)
summarize(grouped, min_dv = min(demVote),
max_dv = max(demVote),
mean_dv = mean(demVote))
}
get_col_info <- function(presidentialElections, demVote){
if (demVote_col <- is.numeric(demVote))
grouped <- group_by(presidentialElections, state)
paste(summarize(grouped, min_dv = min(demVote),
max_dv = max(demVote),
mean_dv = mean(demVote)))
}
View(get_col_info)
nrow(demVote)
nrow(presidentialElections)
nrow(presidentialElections, demVote)
unique(demVote)
unique(presidentialElections, demVote)
length(unique(presidentialElections["demVote"]))
length(unique(presidentialElections["state"]))
length(unique(presidentialElections[["state"]]))
length(unique(presidentialElections[["demVote"]]))
class(presidentialElections[["demVote"]])
(typeof(is.numeric(demVote)))
(typeof(presidentialElections(is.numeric(demVote)))
typeof(presidentialElections(is.numeric(demVote))
typeof(presidentialElections(is.numeric[[(demVote]]))
typeof(presidentialElections(is.numeric[[demVote]]))
typeof(presidentialElections(is.numeric[["demVote"]]))
typeof(is.numeric(presidentialElections[["demVote"]]))
typeof(is.numeric(presidentialElections[[demVote]]))
typeof(is.numeric(presidentialElections[["demVote"]]))
typeof(is.numeric(presidentialElections[["state"]]))
typeof(is.numeric(presidentialElections["state"]))
is.numeric(typeof(presidentialElections["state"]))
is.numeric(typeof(presidentialElections["year"]))
is.numeric(typeof(presidentialElections["demVote"]))
is.numeric(typeof(presidentialElections[["demVote"]]))
is.numeric(typeof(presidentialElections[[demVote]]))
typeof(is.numeric(presidentialElections["state"]))
typeof(is.numeric(presidentialElections["south"]))
typeof(numeric(presidentialElections["state"]))
typeof(numeric(presidentialElections[["state"]]))
typeof(length(presidentialElections[["state"]]))
typeof(length(presidentialElections[["year"]]))
typeof(length(presidentialElections[["demVote"]]))
class(presidentialElections["state"])
class(presidentialElections[["state"]])
class(presidentialElections[["year"]])
class(presidentialElections[["demVote"]])
typeof(presidentialElections[["demVote"]])
typeof(presidentialElections[["year"]])
typeof(presidentialElections[["state"]])
typeof(presidentialElections[["south"]])
typeof(presidentialElections[['demVote']])
typeof(presidentialElections[[demVote]])
class(presidentialElections[["demVote"]])
unique(presidentialElections, demVote)
length(unique(presidentialElections["demVote"]))
class(presidentialElections[["demVote"]])
10<length(unique(presidentialElections[["demVote"]]))
10>length(unique(presidentialElections[["demVote"]]))
length(unique(presidentialElections[["demVote"]])
length(unique(presidentialElections[["demVote"]]))
c(length(unique(presidentialElections[["demVote"]]))
c(length(unique(presidentialElections[["demVote"]])))
aa <- c(length(unique(presidentialElections[["demVote"]])))
aa
length(unique(presidentialElections[["demVote",]]))
length(unique(presidentialElections[[,"demVote"]]))
length(unique(presidentialElections[["demVote",]]))
length(unique(presidentialElections[[ ,"demVote"]]))
length(unique(presidentialElections[[ ,'demVote']]))
length(unique(presidentialElections[ ,"demVote"]))
length(unique(presidentialElections[presidentialElections[ ,'demVote']]))
length(unique(presidentialElections[presidentialElections['demVote']]))
length(unique(presidentialElections$demVote[ ,"demVote"]))
length(unique(presidentialElections$demVote["demVote"]))
length(unique(presidentialElections[:"demVote"]))
length(unique(presidentialElections[,:"demVote"]))
length(unique(presidentialElections[[,:"demVote"]))
length(unique(presidentialElections[[:"demVote"]))
presidentialElections[,"demVote"]
unique(presidentialElections[,"demVote"])
c(unique(presidentialElections[,"demVote"]))
rnum(presidentialElections, demVote)
runif(presidentialElections, demVote)
runif(presidentialElections["demVote"])
runif(presidentialElections[["demVote"]])
sample(presidentialElections[["demVote"]])
c(sample(presidentialElections[["demVote"]]))
get_col_info <- function(presidentialElections, demVote){
if (typeof(presidentialElections[['demVote']]) == "numeric"){
grouped <- group_by(presidentialElections, state)
status <- summarize(grouped, min_dv = min(demVote),
max_dv = max(demVote),
mean_dv = mean(demVote))
} else if ((!typeof(presidentialElections[['demVote']]) && 10>length(unique(presidentialElections[["demVote"]])))) {
status <- list(length(unique(presidentialElections[["demVote"]])),
c(unique(presidentialElections[,"demVote"]))
} else {
status <- ((!typeof(presidentialElections[['demVote']]) && 10<length(unique(presidentialElections[["demVote"]]))))
not_num_dvv <- list(length(unique(presidentialElections[["demVote"]])),
c(sample(presidentialElections[["demVote"]]))
}
status
}
get_col_info <- function(presidentialElections, demVote){
if (typeof(presidentialElections[['demVote']]) == "numeric"){
grouped <- group_by(presidentialElections, state)
status <- summarize(grouped, min_dv = min(demVote),
max_dv = max(demVote),
mean_dv = mean(demVote))
} else if ((!typeof(presidentialElections[['demVote']]) && 10>length(unique(presidentialElections[["demVote"]])))) {
status <- list(length(unique(presidentialElections[["demVote"]])),
c(unique(presidentialElections[,"demVote"])))
} else {
status <- ((!typeof(presidentialElections[['demVote']]) && 10<length(unique(presidentialElections[["demVote"]]))))
not_num_dvv <- list(length(unique(presidentialElections[["demVote"]])), c(sample(presidentialElections[["demVote"]])))
}
status
}
View(get_col_info)
get_col_info(status)
get_col_info(presidentialElections, demVote)
get_col_info(typeof(presidentialElections[['demVote']]) == "numeric")
# Load the `dplyr` package
install.packages("dplyr")
library("dplyr")
install.packages("tidyverse")
library("tidyverse")
install.packages("pscl")
library("pscl")
# Load your data, making sure to not interpret strings as factors
ks_projects <- read.csv("ks-projects-201801.csv", stringsAsFactors = FALSE)
# To start, write the code to get some basic information about the dataframe:
# - What are the column names?
# Displays the column names.
colnames(ks_projects)
# - How many rows is the data frame?
nrow(ks_projects) # returns 378661
dim(ks_projects) # Another way of displaying the number of rows. Also, outputs the number of columns.
# - How many columns are in the data frame?
ncol(ks_projects) # Returns 15
dim(ks_projects) # Another way of displaying the number of columns; in addition to displaying the # of rows
# Use the `summary` function to get some summary information
# Provides summary statistics of the ks_projects data frame with the summarize function
summary_information <- summarize(ks_projects, mean_ksp = mean(usd_goal_real),
median_ksp = median(usd_goal_real), max_ksp = max(usd_goal_real),
mean_goal = mean(goal), median_goal = median(goal), max(goal), count = n())
# Unfortunately, this doesn't give us a great set of insights. Let's write a
# few functions to try and do this better.
# First, let's write a function `get_col_info()` that takes as parameters a
# column name and a dataframe. If the values in the column are *numeric*,
# the function should return a list with the keys:
# - `min`: the minimum value of the column
# - `max`: the maximum value of the column
# - `mean`: the mean value of the column
# If the column is *not* numeric and there are fewer than 10 unique values in
# the column, you should return a list with the keys:
# - `n_values`: the number of unique values in the column
# - `unique_values`: a vector of each unique value in the column
# If the column is *not* numeric and there are 10 or *more* unique values in
# the column, you should return a list with the keys:
# - `n_values`: the number of unique values in the column
# - `sample_values`: a vector containing a random sample of 10 column values
# Hint: use `typeof()` to determine the column type
options(warn=1)
#numeric_num <- "numeric" && "integer" && "double"
col_name <- "ID" | "name" | "category" | "main_category" | "currency" | "deadline" | "goal" | "launched" | "pledged" | "state" | "backers" | "country" | "usd.pledged" | "usd_pledged_real" | "usd_goal_real"
get_col_info <- function(ks_projects, col_name){
if (typeof(ks_projects[[col_name]]) == "double"){
grouped <- group_by(ks_projects, ID)
return(summarize(grouped, min_ksp = min(col_name),
max_ksp = max(col_name),
mean_ksp = mean(col_name)))
} else if ((typeof(ks_projects[[col_name]]) != "double" && length(unique(ks_projects[[col_name]]))<10)) {
return(list(length(unique(ks_projects[[col_name]])),
c(unique(ks_projects[,col_name]))))
} else {
return(list(length(unique(ks_projects[[col_name]])), sample(c(ks_projects[[col_name]]), head(10))))
}
}
ks_projects
view(ks_projects)
ks_projects
numeric_num <- "numeric" == "integer" == "double"
col_name <- "ID" | "name" | "category" | "main_category" | "currency" | "deadline" | "goal" | "launched" | "pledged" | "state" | "backers" | "country" | "usd.pledged" | "usd_pledged_real" | "usd_goal_real"
get_col_info <- function(ks_projects, col_name){
if (typeof(ks_projects[[col_name]]) == "double"){
grouped <- group_by(ks_projects, ID)
return(summarize(grouped, min_ksp = min(col_name),
max_ksp = max(col_name),
mean_ksp = mean(col_name)))
} else if ((typeof(ks_projects[[col_name]]) != "double" && length(unique(ks_projects[[col_name]]))<10)) {
return(list(length(unique(ks_projects[[col_name]])),
c(unique(ks_projects[,col_name]))))
} else {
return(list(length(unique(ks_projects[[col_name]])), sample(c(ks_projects[[col_name]]), head(10))))
}
}
get_col_info(ks_projects, "currency")
get_col_info(ks_projects, "goal")
# Natural Amenities Scale
INFO-201: Technical Foundations of Informatics<br>
The Information School<br>
University of Washington<br>
David Hendry<br>
Autumn, 2019
See [Report list](https://dghendry.github.io/natural-amenity-scale/).
<hr>
GitHub Repository Name: https://github.com/dghendry/natural-amenity-scale<br>
URL: https://dghendry.github.io/natural-amenity-scale/
ui <- fluidPage(
# An `h1()` content element that contains an `em()` content element
# This will render like the Markdown content `# My _Awesome_ App`
h1("My", em("Awesome"), "App"),
# Passing multiple string arguments will cause them to be concatenated (within
# the same paragraph)
p("My app is really cool.", "It's the coolest thing ever!"),
)
shiny::runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
install.packages("shiny")
install.packages("shiny")
library("shiny")
install.packages("shiny")
shiny::runApp('C:/Users/19254/Desktop/project_shiny/Food_Availability')
install.packages("shiny")
setwd("C:/Users/19254/Desktop/project_shiny/Food_Availability")
